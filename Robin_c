// Robin

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
} Process;

void round_robin_scheduling(Process *processes, int n, int time_quantum) {
    int current_time = 0;
    int completed_processes = 0;
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    while (completed_processes < n) {
        bool process_executed = false;

        for (int i = 0; i < n; i++) {
            // Check if process has arrived and has remaining time
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                process_executed = true;

                // Execute process for time quantum or remaining time
                if (processes[i].remaining_time > time_quantum) {
                    current_time += time_quantum;
                    processes[i].remaining_time -= time_quantum;
                } else {
                    current_time += processes[i].remaining_time;

                    // Calculate waiting and turnaround times
                    processes[i].waiting_time = current_time - processes[i].arrival_time - processes[i].burst_time;
                    processes[i].turnaround_time = current_time - processes[i].arrival_time;

                    processes[i].remaining_time = 0;
                    completed_processes++;
                }
            }
        }

        // If no process was ready, increment time
        if (!process_executed) {
            current_time++;
        }
    }

    // Print results
    printf("Process\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\n",
               processes[i].process_id,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].waiting_time,
               processes[i].turnaround_time);

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n, time_quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process *processes = malloc(n * sizeof(Process));

    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;

        printf("Enter arrival time for Process %d: ", i+1);
        scanf("%d", &processes[i].arrival_time);

        printf("Enter burst time for Process %d: ", i+1);
        scanf("%d", &processes[i].burst_time);

        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("Enter time quantum: ");
    scanf("%d", &time_quantum);

    round_robin_scheduling(processes, n, time_quantum);

    free(processes);
    return 0;
}
