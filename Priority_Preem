//  PRIORITY PREEMPTIVE
#include <stdio.h>
#include <limits.h>
typedef struct {
    int pid;
    int burst_time;
    int arrival_time;
    int priority;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
} Process;
void preemptive_priority_scheduling(Process p[], int n) {
    int current_time = 0;
    int completed = 0;
    float total_waiting_time = 0, total_turnaround_time = 0;
    while (completed != n) {
        int highest_priority_job = -1;
        int max_priority = INT_MIN;
        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= current_time && 
                p[i].remaining_time > 0 && 
                p[i].priority > max_priority) {
                highest_priority_job = i;
                max_priority = p[i].priority;
            }
        }
        if (highest_priority_job == -1) {
            current_time++;
            continue;
        }
        p[highest_priority_job].remaining_time--;
        if (p[highest_priority_job].remaining_time == 0) {
            completed++;
            p[highest_priority_job].turnaround_time = current_time + 1 - p[highest_priority_job].arrival_time;
            p[highest_priority_job].waiting_time = p[highest_priority_job].turnaround_time - p[highest_priority_job].burst_time;   
            total_waiting_time += p[highest_priority_job].waiting_time;
            total_turnaround_time += p[highest_priority_job].turnaround_time;
        }
        current_time++;
    }
    printf("\nPreemptive Priority Scheduling Results:\n");
    printf("PID\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", 
               p[i].pid, p[i].burst_time, p[i].priority,
               p[i].waiting_time, p[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}
int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Process %d Arrival Time: ", i+1);
        scanf("%d", &p[i].arrival_time);
        printf("Process %d Burst Time: ", i+1);
        scanf("%d", &p[i].burst_time);
        printf("Process %d Priority (lower number = higher priority): ", i+1);
        scanf("%d", &p[i].priority);
        p[i].remaining_time = p[i].burst_time;
    }
    preemptive_priority_scheduling(p, n);
    return 0;
}
// //input
// arrival    burst    priority
// 0            11        3
// 5            20        1
// 12            2        4
// 2            10        2
// 9            16        5
