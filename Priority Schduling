//PRIORITY SCHDULING
#include <stdio.h>
#include <stdlib.h>

struct process {
    int process_id;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int finish_time;
    int turn_around_time;
    int priority;
    int completed;
};

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct process proc[n];
    int i, j, current_time = 0, completed_processes = 0;

    // Input process data
    printf("Enter data (Arrival Time, Burst Time, Priority):\n");
    for (i = 0; i < n; i++) {
        proc[i].process_id = i + 1;
        scanf("%d %d %d", &proc[i].arrival_time, &proc[i].burst_time, &proc[i].priority);
        proc[i].completed = 0; // Flag to check if process is completed
    }

    // Sort processes by arrival time initially
    struct process temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (proc[j].arrival_time > proc[j + 1].arrival_time) {
                temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
        }
    }

    // Priority Scheduling Logic
    while (completed_processes < n) {
        int min_priority = __INT_MAX__;
        int idx = -1;

        // Find the process with the highest priority that has arrived
        for (i = 0; i < n; i++) {
            if (proc[i].arrival_time <= current_time && !proc[i].completed && proc[i].priority < min_priority) {
                min_priority = proc[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            // Process the selected process
            proc[idx].finish_time = current_time + proc[idx].burst_time;
            proc[idx].turn_around_time = proc[idx].finish_time - proc[idx].arrival_time;
            proc[idx].waiting_time = proc[idx].turn_around_time - proc[idx].burst_time;
            current_time = proc[idx].finish_time;
            proc[idx].completed = 1;
            completed_processes++;
        } else {
            // If no process has arrived, increment the current time
            current_time++;
        }
    }

    // Output results
    printf("Process\tArrival Time\tBurst Time\tPriority\tFinish Time\tTurn-Around Time\tWaiting Time\n");
    int total_tat = 0, total_wt = 0;
    for (i = 0; i < n; i++) {
        total_tat += proc[i].turn_around_time;
        total_wt += proc[i].waiting_time;
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%d\n", proc[i].process_id, proc[i].arrival_time,
               proc[i].burst_time, proc[i].priority, proc[i].finish_time, proc[i].turn_around_time, proc[i].waiting_time);
    }

    // Display averages
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_tat / n);
    printf("Average Waiting Time: %.2f\n", (float)total_wt / n);

    return 0;
}
