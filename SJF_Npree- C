SJS Non Prim

#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
typedef struct {
    int pid;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
} Process;
void non_preemptive_sjf(Process p[], int n) {
    int current_time = 0;
    float total_waiting_time = 0, total_turnaround_time = 0;
    bool *completed = calloc(n, sizeof(bool));
    for (int count = 0; count < n; count++) {
        int shortest_job = -1;
        int min_burst = INT_MAX;
        for (int j = 0; j < n; j++) {
            if (!completed[j] && p[j].arrival_time <= current_time && p[j].burst_time < min_burst) {
                shortest_job = j;
                min_burst = p[j].burst_time;
            }
        }
        if (shortest_job == -1) {
            current_time++;
            count--;
            continue;
        }
        p[shortest_job].waiting_time = current_time - p[shortest_job].arrival_time;
        current_time += p[shortest_job].burst_time;
        p[shortest_job].turnaround_time = p[shortest_job].waiting_time + p[shortest_job].burst_time;
        total_waiting_time += p[shortest_job].waiting_time;
        total_turnaround_time += p[shortest_job].turnaround_time;
        completed[shortest_job] = true;
    }
    printf("\nNon-Preemptive SJF Scheduling Results:\n");
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", 
               p[i].pid, p[i].burst_time, 
               p[i].waiting_time, p[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
    free(completed);
}
int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Process %d Arrival Time: ", i+1);
        scanf("%d", &p[i].arrival_time);
        printf("Process %d Burst Time: ", i+1);
        scanf("%d", &p[i].burst_time);
    }
    non_preemptive_sjf(p, n);
    return 0;
}
// //input
// burst
// 6
// 8
// 7
// 3
