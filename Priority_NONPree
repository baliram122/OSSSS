// PRIORITY NON-PREEMPTIVE
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>
typedef struct {
    int pid;
    int burst_time;
    int arrival_time;
    int priority;
    int waiting_time;
    int turnaround_time;
    bool completed;
} Process;
int compare_arrival(const void *a, const void *b) {
    return ((Process*)a)->arrival_time - ((Process*)b)->arrival_time;
}
void non_preemptive_priority_scheduling(Process p[], int n) {
    qsort(p, n, sizeof(Process), compare_arrival);
    int current_time = 0;
    float total_waiting_time = 0, total_turnaround_time = 0;
    int completed_processes = 0;
    while (completed_processes < n) {
        int highest_priority_job = -1;
        int max_priority = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (!p[i].completed && p[i].arrival_time <= current_time) {
                if (p[i].priority < max_priority) {
                    highest_priority_job = i;
                    max_priority = p[i].priority;
                }
            }
        }
        if (highest_priority_job == -1) {
            current_time++;
            continue;
        }
        current_time += p[highest_priority_job].burst_time;
        p[highest_priority_job].turnaround_time = current_time - p[highest_priority_job].arrival_time;
        p[highest_priority_job].waiting_time = p[highest_priority_job].turnaround_time - p[highest_priority_job].burst_time;
        p[highest_priority_job].completed = true;
        total_waiting_time += p[highest_priority_job].waiting_time;
        total_turnaround_time += p[highest_priority_job].turnaround_time;
        completed_processes++;
    }
    printf("\nNon-Preemptive Priority Scheduling Results:\n");
    printf("PID\tArrival Time\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
               p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].priority,
               p[i].waiting_time, p[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}
int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    Process *p = malloc(n * sizeof(Process));
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Process %d Arrival Time: ", i+1);
        scanf("%d", &p[i].arrival_time);
        printf("Process %d Burst Time: ", i+1);
        scanf("%d", &p[i].burst_time);
        printf("Process %d Priority (lower number = higher priority): ", i+1);
        scanf("%d", &p[i].priority);
        p[i].completed = false;
    }
    non_preemptive_priority_scheduling(p, n);
    free(p);
    return 0;
}
// //input
// arrival    burst    priority
// 0            4        4
// 1            3        3
// 2            1        2
// 3            5        1
// 4            2        1
